# This file was generated based on "schema.json". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"volskaya Message Interface Description"
interface volskayaMessageInterface {
    message: String!
}

type Coordinate {
    latitude: Float!
    longitude: Float!
}

type Device {
    imei: String!
    name: String!
    number: String!
    token: String
}

type FavoriteSite {
    address: String!
    coordinate: Coordinate!
    name: String!
}

type Goal {
    goalCanceled: GoalCanceled
    goalCoordinate: Coordinate
    goalTypeName: String
    products: [Product!]
    userCyclistId: String
}

type GoalCanceled {
    reason: String
    time: String
}

type Mutation {
    addFavoriteSite(favoriteSite: FavoriteSiteFieldsInput!, id: String!): volskayaMessageOutputType!
    addUser(confirmationCode: String, device: DeviceFieldsInput, email: String, favoriteSites: [FavoriteSiteFieldsInput!], id: String, isAuthenticated: Boolean, orders: [OrderFieldsInput!], password: String, personalInformation: PersonalInformationFieldsInput): UserDomain!
    register(email: String!, password: String!, phoneNumber: String!): volskayaMessageRegisterOutputType!
    updatePassword(id: String!, newPassword: String!, oldPassword: String!): volskayaMessageOutputType!
}

type Order {
    finalPrice: Float
    goals: [Goal!]
    isPaid: Boolean
    kilometers: Float
    orderTypeName: String
    paymentDateTime: String
    paymentMethod: String
    statusOrderTypeName: String
}

type PersonalInformation {
    dni: String!
    firstName: String!
    lastName: String!
}

type Product {
    description: String!
    isSpecial: Boolean
    name: String!
    photo: String
}

type Query {
    "Returns a list of all available users."
    allUsers: [UserDomain!]!
    checkCode(code: String!, id: String!): volskayaMessageOutputType!
    "Return a price of one Route"
    getPrice(coordinateFinish: CoordinateFieldsInput!, coordinateStart: CoordinateFieldsInput!): volskayaMessagePriceOutputType!
    "Return a specific User by ID"
    getUser(id: String!): volskayaMessageUserOutputType!
    login(email: String!, password: String!): volskayaMessageLoginOutputType!
    sendCode(code: String!, phoneNumber: String!): volskayaMessageOutputType!
}

type UserDomain {
    confirmationCode: String
    device: Device
    email: String
    favoriteSites: [FavoriteSite!]
    id: String
    isAuthenticated: Boolean
    orders: [Order!]
    password: String
    personalInformation: PersonalInformation
}

"Format to return login request"
type volskayaMessageLoginOutputType {
    id: String
    volskayaResponse: volskayaMessageOutputType!
}

"Format to return some request"
type volskayaMessageOutputType implements volskayaMessageInterface {
    message: String!
    responseCode: String!
    responseMessage: String!
}

"Format to return getPrice request"
type volskayaMessagePriceOutputType {
    price: Float
    volskayaResponse: volskayaMessageOutputType!
}

"Format to return register request"
type volskayaMessageRegisterOutputType {
    id: String
    volskayaResponse: volskayaMessageOutputType!
}

"Format to return getUser request"
type volskayaMessageUserOutputType {
    user: UserDomain
    volskayaResponse: volskayaMessageOutputType!
}

input CoordinateFieldsInput {
    latitude: Float!
    longitude: Float!
}

input DeviceFieldsInput {
    imei: String!
    name: String!
    number: String!
    token: String
}

input FavoriteSiteFieldsInput {
    address: String!
    coordinate: CoordinateFieldsInput!
    name: String!
}

input GoalCanceledFieldsInput {
    reason: String
    time: String
}

input GoalFieldsInput {
    goalCanceled: GoalCanceledFieldsInput
    goalCoordinate: CoordinateFieldsInput
    goalTypeName: String
    products: [ProductFieldsInput!]
    userCyclistId: String
}

input OrderFieldsInput {
    finalPrice: Float
    goals: [GoalFieldsInput!]
    isPaid: Boolean
    kilometers: Float
    orderTypeName: String
    paymentDateTime: String
    paymentMethod: String
    statusOrderTypeName: String
}

input PersonalInformationFieldsInput {
    dni: String!
    firstName: String!
    lastName: String!
}

input ProductFieldsInput {
    description: String!
    isSpecial: Boolean
    name: String!
    photo: String
}
