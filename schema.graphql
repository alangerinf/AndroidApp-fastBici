# This file was generated based on "schema.json". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"volskaya Message Interface Description"
interface volskayaMessageInterface {
    message: String!
}

type Address {
    coordinate: Coordinate!
    nameAddress: String!
    reference: String!
}

type Coordinate {
    latitude: Float!
    longitude: Float!
}

type Device {
    imei: String!
    name: String!
    number: String!
    token: String
}

type FavoriteSite {
    address: String!
    coordinate: Coordinate!
    name: String!
}

type FinalClient {
    name: String!
    phoneNumber: String!
}

type Mutation {
    addFavoriteSite(favoriteSite: FavoriteSiteFieldsInput!, id: String!): volskayaMessageOutputType!
    register(email: String!, password: String!, phoneNumber: String!): volskayaMessageUserOutputType!
    registerOrder(clientId: String!, distance: Float!, finalClient: FinalClientFieldsInput!, generalDescription: String!, price: Float!, products: [ProductFieldsInput!]!, route: RouteFieldsInput!): volskayaMessageRegisterOutputType!
    updatePassword(id: String!, newPassword: String!, oldPassword: String!): volskayaMessageOutputType!
}

type OrderDomain {
    clientId: String
    created: String
    cyclistId: String
    distance: Float
    finalClient: FinalClient
    generalDescription: String
    id: String
    isPaid: Boolean
    lastState: OrderState
    orderStates: [OrderState!]!
    payMethod: String
    price: Float
    products: [Product!]!
    route: Route
}

type OrderState {
    description: String
    endTime: String
    isFinished: Boolean!
    nameState: String!
    startTime: String
}

type PersonalInformation {
    dni: String!
    firstName: String!
    lastName: String!
}

type Product {
    name: String!
    quantity: Int!
}

type Query {
    "Returns a list of all available orders."
    allOrders(limit: Int = 20, offset: Int = 0): [OrderDomain!]!
    "Returns a list of all available users."
    allUsers(limit: Int = 20, offset: Int = 0): [UserDomain!]!
    checkCode(code: String!, id: String!): volskayaMessageOutputType!
    "Return a specific User by ID"
    getOrder(id: String!): volskayaMessageOrderOutputType!
    "Return a price of one Route"
    getPrice(coordinateFinish: CoordinateFieldsInput!, coordinateStart: CoordinateFieldsInput!): volskayaMessagePriceOutputType!
    "Return a specific User by ID"
    getUser(id: String!): volskayaMessageUserOutputType!
    login(email: String!, password: String!): volskayaMessageUserOutputType!
}

type Route {
    endAddress: Address!
    startAddress: Address!
}

type UserDomain {
    confirmationCode: String
    device: Device
    email: String
    favoriteSites: [FavoriteSite!]
    id: String
    isAuthenticated: Boolean
    password: String
    personalInformation: PersonalInformation
    role: String
}

"Format to return getORder request"
type volskayaMessageOrderOutputType {
    order: OrderDomain
    volskayaResponse: volskayaMessageOutputType!
}

"Format to return some request"
type volskayaMessageOutputType implements volskayaMessageInterface {
    message: String!
    responseCode: String!
    responseMessage: String!
}

"Format to return getPrice request"
type volskayaMessagePriceOutputType {
    distance: Int
    price: Float
    volskayaResponse: volskayaMessageOutputType!
}

"Format to return register request"
type volskayaMessageRegisterOutputType {
    id: String
    volskayaResponse: volskayaMessageOutputType!
}

"Format to return getUser request"
type volskayaMessageUserOutputType {
    user: UserDomain
    volskayaResponse: volskayaMessageOutputType!
}

input AddressFieldsInput {
    coordinate: CoordinateFieldsInput!
    nameAddress: String!
    reference: String!
}

input CoordinateFieldsInput {
    latitude: Float!
    longitude: Float!
}

input FavoriteSiteFieldsInput {
    address: String!
    coordinate: CoordinateFieldsInput!
    name: String!
}

input FinalClientFieldsInput {
    name: String!
    phoneNumber: String!
}

input ProductFieldsInput {
    name: String!
    quantity: Int!
}

input RouteFieldsInput {
    endAddress: AddressFieldsInput!
    startAddress: AddressFieldsInput!
}
